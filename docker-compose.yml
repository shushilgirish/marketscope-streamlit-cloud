version: '3.8'
 
# Common configuration for Airflow services
x-airflow-common:
  &airflow-common
  image: ${AIRFLOW_IMAGE:-airflow-custom:latest}  # Use the custom image from CI/CD or build locally
  build:
    context: .
    dockerfile: ./Airflow/Dockerfile  
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: 'XrG08Cq6vp4c2n2vMVGy_VYOoDAhk6TbhHzoBAAV7iM='
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
  volumes:
    - ./Airflow/dags:/opt/airflow/dags
    - ./Airflow/logs:/opt/airflow/logs
    - ./Airflow/config:/opt/airflow/config
    - ./Airflow/plugins:/opt/airflow/plugins
    - ./.env:/opt/airflow/.env
    - ./Backend:/opt/airflow/Backend
    - ./source-books:/opt/airflow/source-books
  networks:
    - app-network
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy
 
services:
  # MCP Server services
  mcp-server:
    image: ${IMAGE:-marketscope:latest}  # Use the image from CI/CD or build locally
    build:
      context: .
      dockerfile: ./Dockerfile
    container_name: mcp-server
    env_file:
      - ./.env copy
    restart: always
    ports:
      - "8000:8000"  # Unified Server
      - "8001:8001"  # Market Analysis
      - "8002:8002"  # Sales Analytics
      - "8003:8003"  # Legacy Segment
      - "8004:8004"  # Snowflake
      - "8005:8005"  # Other potential ports
      - "8006:8006"
      - "8007:8007"
      - "8008:8008"
      - "8009:8009"
      - "8010:8010"
      - "8011:8011"
      - "8012:8012"
      - "8013:8013"
      - "8014:8014"
      - "8015:8015"
      - "8016:8016"  # Reddit & Shopify
    volumes:
      - ./data:/app/data
      - ./.env:/app/.env
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
 
  # Airflow services
  postgres:
    image: postgres:13
    container_name: airflow-postgres
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
 
  redis:
    image: redis:7.2-bookworm
    container_name: airflow-redis
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always
    networks:
      - app-network
 
  airflow-webserver:
    <<: *airflow-common
    container_name: airflow-webserver
    command: webserver --port 8080 --host 0.0.0.0
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully
 
  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    command: scheduler
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully
 
  airflow-worker:
    <<: *airflow-common
    container_name: airflow-worker
    command: celery worker
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully
 
  airflow-triggerer:
    <<: *airflow-common
    container_name: airflow-triggerer
    command: triggerer
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully
 
  airflow-init:
    <<: *airflow-common
    container_name: airflow-init
    entrypoint: /bin/bash
    command:
      - -c
      - |
        echo "Initializing Airflow DB..."
        airflow db upgrade
        airflow users create \
          --username admin \
          --password admin \
          --firstname Admin \
          --lastname User \
          --role Admin \
          --email admin@example.com
        echo "Verifying package installation..."
        pip list | grep sentence
        pip list | grep pinecone
        pip list | grep selenium
        echo "Airflow Initialization Complete!"
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
    user: "${AIRFLOW_UID:-50000}:0"
    restart: on-failure
    volumes:
      - ./Airflow:/sources
 
  airflow-cli:
    <<: *airflow-common
    container_name: airflow-cli
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    command:
      - bash
      - -c
      - airflow
 
volumes:
  postgres-db-volume:
 
networks:
  app-network:
    driver: bridge